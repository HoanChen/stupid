package me.khrystal.gmatorm.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import me.khrystal.gmatorm.ormdto.VocabularyDeckFlashcard;

import me.khrystal.gmatorm.ormdto.VocabularyFlashcard;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "vocabularyflashcard".
*/
public class VocabularyFlashcardDao extends AbstractDao<VocabularyFlashcard, Long> {

    public static final String TABLENAME = "vocabularyflashcard";

    /**
     * Properties of entity VocabularyFlashcard.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IsNew = new Property(1, boolean.class, "isNew", false, "is_new");
        public final static Property Creation_date = new Property(2, String.class, "creation_date", false, "creation_date");
        public final static Property Modified_data = new Property(3, String.class, "modified_data", false, "modified_data");
        public final static Property Create_at = new Property(4, String.class, "create_at", false, "created_at");
        public final static Property Updated_at = new Property(5, String.class, "updated_at", false, "updated_at");
        public final static Property Client_creation_date = new Property(6, String.class, "client_creation_date", false, "client_creation_date");
        public final static Property Resource_uri = new Property(7, String.class, "resource_uri", false, "resource_uri");
        public final static Property Word = new Property(8, String.class, "word", false, "word");
        public final static Property Pronunciation = new Property(9, String.class, "pronunciation", false, "pronunciation");
        public final static Property Definition = new Property(10, String.class, "definition", false, "definition");
        public final static Property Context_sentence = new Property(11, String.class, "context_sentence", false, "context_sentence");
        public final static Property Not_to_be_confused_with = new Property(12, String.class, "not_to_be_confused_with", false, "not_to_be_confused_with");
        public final static Property Helpful_hints = new Property(13, String.class, "helpful_hints", false, "helpful_hints");
        public final static Property Difficulty = new Property(14, Integer.class, "difficulty", false, "difficulty");
        public final static Property Uuid = new Property(15, String.class, "uuid", false, "uuid");
        public final static Property Is_pending_sync = new Property(16, Integer.class, "is_pending_sync", false, "is_pending_sync");
        public final static Property Status = new Property(17, Integer.class, "status", false, "status");
        public final static Property Order = new Property(18, String.class, "order", false, "order");
    }

    private DaoSession daoSession;

    private Query<VocabularyFlashcard> vocabularyDeck_FlashcardsQuery;

    public VocabularyFlashcardDao(DaoConfig config) {
        super(config);
    }
    
    public VocabularyFlashcardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VocabularyFlashcard entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIsNew() ? 1L: 0L);
 
        String creation_date = entity.getCreation_date();
        if (creation_date != null) {
            stmt.bindString(3, creation_date);
        }
 
        String modified_data = entity.getModified_data();
        if (modified_data != null) {
            stmt.bindString(4, modified_data);
        }
 
        String create_at = entity.getCreate_at();
        if (create_at != null) {
            stmt.bindString(5, create_at);
        }
 
        String updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindString(6, updated_at);
        }
 
        String client_creation_date = entity.getClient_creation_date();
        if (client_creation_date != null) {
            stmt.bindString(7, client_creation_date);
        }
 
        String resource_uri = entity.getResource_uri();
        if (resource_uri != null) {
            stmt.bindString(8, resource_uri);
        }
 
        String word = entity.getWord();
        if (word != null) {
            stmt.bindString(9, word);
        }
 
        String pronunciation = entity.getPronunciation();
        if (pronunciation != null) {
            stmt.bindString(10, pronunciation);
        }
 
        String definition = entity.getDefinition();
        if (definition != null) {
            stmt.bindString(11, definition);
        }
 
        String context_sentence = entity.getContext_sentence();
        if (context_sentence != null) {
            stmt.bindString(12, context_sentence);
        }
 
        String not_to_be_confused_with = entity.getNot_to_be_confused_with();
        if (not_to_be_confused_with != null) {
            stmt.bindString(13, not_to_be_confused_with);
        }
 
        String helpful_hints = entity.getHelpful_hints();
        if (helpful_hints != null) {
            stmt.bindString(14, helpful_hints);
        }
 
        Integer difficulty = entity.getDifficulty();
        if (difficulty != null) {
            stmt.bindLong(15, difficulty);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(16, uuid);
        }
 
        Integer is_pending_sync = entity.getIs_pending_sync();
        if (is_pending_sync != null) {
            stmt.bindLong(17, is_pending_sync);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(18, status);
        }
 
        String order = entity.getOrder();
        if (order != null) {
            stmt.bindString(19, order);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VocabularyFlashcard entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIsNew() ? 1L: 0L);
 
        String creation_date = entity.getCreation_date();
        if (creation_date != null) {
            stmt.bindString(3, creation_date);
        }
 
        String modified_data = entity.getModified_data();
        if (modified_data != null) {
            stmt.bindString(4, modified_data);
        }
 
        String create_at = entity.getCreate_at();
        if (create_at != null) {
            stmt.bindString(5, create_at);
        }
 
        String updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindString(6, updated_at);
        }
 
        String client_creation_date = entity.getClient_creation_date();
        if (client_creation_date != null) {
            stmt.bindString(7, client_creation_date);
        }
 
        String resource_uri = entity.getResource_uri();
        if (resource_uri != null) {
            stmt.bindString(8, resource_uri);
        }
 
        String word = entity.getWord();
        if (word != null) {
            stmt.bindString(9, word);
        }
 
        String pronunciation = entity.getPronunciation();
        if (pronunciation != null) {
            stmt.bindString(10, pronunciation);
        }
 
        String definition = entity.getDefinition();
        if (definition != null) {
            stmt.bindString(11, definition);
        }
 
        String context_sentence = entity.getContext_sentence();
        if (context_sentence != null) {
            stmt.bindString(12, context_sentence);
        }
 
        String not_to_be_confused_with = entity.getNot_to_be_confused_with();
        if (not_to_be_confused_with != null) {
            stmt.bindString(13, not_to_be_confused_with);
        }
 
        String helpful_hints = entity.getHelpful_hints();
        if (helpful_hints != null) {
            stmt.bindString(14, helpful_hints);
        }
 
        Integer difficulty = entity.getDifficulty();
        if (difficulty != null) {
            stmt.bindLong(15, difficulty);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(16, uuid);
        }
 
        Integer is_pending_sync = entity.getIs_pending_sync();
        if (is_pending_sync != null) {
            stmt.bindLong(17, is_pending_sync);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(18, status);
        }
 
        String order = entity.getOrder();
        if (order != null) {
            stmt.bindString(19, order);
        }
    }

    @Override
    protected final void attachEntity(VocabularyFlashcard entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public VocabularyFlashcard readEntity(Cursor cursor, int offset) {
        VocabularyFlashcard entity = new VocabularyFlashcard( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getShort(offset + 1) != 0, // isNew
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // creation_date
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // modified_data
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // create_at
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // updated_at
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // client_creation_date
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // resource_uri
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // word
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // pronunciation
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // definition
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // context_sentence
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // not_to_be_confused_with
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // helpful_hints
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // difficulty
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // uuid
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // is_pending_sync
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // status
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // order
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VocabularyFlashcard entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIsNew(cursor.getShort(offset + 1) != 0);
        entity.setCreation_date(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setModified_data(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreate_at(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUpdated_at(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setClient_creation_date(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setResource_uri(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setWord(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPronunciation(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDefinition(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setContext_sentence(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setNot_to_be_confused_with(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setHelpful_hints(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDifficulty(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setUuid(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setIs_pending_sync(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setStatus(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setOrder(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(VocabularyFlashcard entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(VocabularyFlashcard entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VocabularyFlashcard entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "flashcards" to-many relationship of VocabularyDeck. */
    public List<VocabularyFlashcard> _queryVocabularyDeck_Flashcards(Long deck_id) {
        synchronized (this) {
            if (vocabularyDeck_FlashcardsQuery == null) {
                QueryBuilder<VocabularyFlashcard> queryBuilder = queryBuilder();
                queryBuilder.join(VocabularyDeckFlashcard.class, VocabularyDeckFlashcardDao.Properties.Flashcard_id)
                    .where(VocabularyDeckFlashcardDao.Properties.Deck_id.eq(deck_id));
                vocabularyDeck_FlashcardsQuery = queryBuilder.build();
            }
        }
        Query<VocabularyFlashcard> query = vocabularyDeck_FlashcardsQuery.forCurrentThread();
        query.setParameter(0, deck_id);
        return query.list();
    }

}
