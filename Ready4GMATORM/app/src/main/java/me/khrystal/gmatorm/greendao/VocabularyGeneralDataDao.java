package me.khrystal.gmatorm.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import me.khrystal.gmatorm.ormdto.VocabularyGeneralData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "vocabularygeneraldata".
*/
public class VocabularyGeneralDataDao extends AbstractDao<VocabularyGeneralData, Long> {

    public static final String TABLENAME = "vocabularygeneraldata";

    /**
     * Properties of entity VocabularyGeneralData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IsNew = new Property(1, boolean.class, "isNew", false, "is_new");
        public final static Property Creation_date = new Property(2, String.class, "creation_date", false, "creation_date");
        public final static Property Modified_data = new Property(3, String.class, "modified_data", false, "modified_data");
        public final static Property Create_at = new Property(4, String.class, "create_at", false, "created_at");
        public final static Property Updated_at = new Property(5, String.class, "updated_at", false, "updated_at");
        public final static Property Client_creation_date = new Property(6, String.class, "client_creation_date", false, "client_creation_date");
        public final static Property Title = new Property(7, String.class, "title", false, "title");
        public final static Property Resource_uri = new Property(8, String.class, "resource_uri", false, "resource_uri");
        public final static Property Type = new Property(9, Integer.class, "type", false, "type");
        public final static Property Uuid = new Property(10, String.class, "uuid", false, "uuid");
    }

    private Query<VocabularyGeneralData> vocabularyFlashcard_Group_1Query;
    private Query<VocabularyGeneralData> vocabularyFlashcard_Group_2Query;
    private Query<VocabularyGeneralData> vocabularyFlashcard_Group_3Query;
    private Query<VocabularyGeneralData> vocabularyFlashcard_Part_of_speechQuery;
    private Query<VocabularyGeneralData> vocabularyFlashcard_ConnotationQuery;

    public VocabularyGeneralDataDao(DaoConfig config) {
        super(config);
    }
    
    public VocabularyGeneralDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VocabularyGeneralData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIsNew() ? 1L: 0L);
 
        String creation_date = entity.getCreation_date();
        if (creation_date != null) {
            stmt.bindString(3, creation_date);
        }
 
        String modified_data = entity.getModified_data();
        if (modified_data != null) {
            stmt.bindString(4, modified_data);
        }
 
        String create_at = entity.getCreate_at();
        if (create_at != null) {
            stmt.bindString(5, create_at);
        }
 
        String updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindString(6, updated_at);
        }
 
        String client_creation_date = entity.getClient_creation_date();
        if (client_creation_date != null) {
            stmt.bindString(7, client_creation_date);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(8, title);
        }
 
        String resource_uri = entity.getResource_uri();
        if (resource_uri != null) {
            stmt.bindString(9, resource_uri);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(10, type);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(11, uuid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VocabularyGeneralData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIsNew() ? 1L: 0L);
 
        String creation_date = entity.getCreation_date();
        if (creation_date != null) {
            stmt.bindString(3, creation_date);
        }
 
        String modified_data = entity.getModified_data();
        if (modified_data != null) {
            stmt.bindString(4, modified_data);
        }
 
        String create_at = entity.getCreate_at();
        if (create_at != null) {
            stmt.bindString(5, create_at);
        }
 
        String updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindString(6, updated_at);
        }
 
        String client_creation_date = entity.getClient_creation_date();
        if (client_creation_date != null) {
            stmt.bindString(7, client_creation_date);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(8, title);
        }
 
        String resource_uri = entity.getResource_uri();
        if (resource_uri != null) {
            stmt.bindString(9, resource_uri);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(10, type);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(11, uuid);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public VocabularyGeneralData readEntity(Cursor cursor, int offset) {
        VocabularyGeneralData entity = new VocabularyGeneralData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getShort(offset + 1) != 0, // isNew
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // creation_date
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // modified_data
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // create_at
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // updated_at
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // client_creation_date
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // title
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // resource_uri
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // type
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // uuid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VocabularyGeneralData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIsNew(cursor.getShort(offset + 1) != 0);
        entity.setCreation_date(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setModified_data(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreate_at(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUpdated_at(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setClient_creation_date(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTitle(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setResource_uri(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setType(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setUuid(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(VocabularyGeneralData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(VocabularyGeneralData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VocabularyGeneralData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "group_1" to-many relationship of VocabularyFlashcard. */
    public List<VocabularyGeneralData> _queryVocabularyFlashcard_Group_1(Long id) {
        synchronized (this) {
            if (vocabularyFlashcard_Group_1Query == null) {
                QueryBuilder<VocabularyGeneralData> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                vocabularyFlashcard_Group_1Query = queryBuilder.build();
            }
        }
        Query<VocabularyGeneralData> query = vocabularyFlashcard_Group_1Query.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

    /** Internal query to resolve the "group_2" to-many relationship of VocabularyFlashcard. */
    public List<VocabularyGeneralData> _queryVocabularyFlashcard_Group_2(Long id) {
        synchronized (this) {
            if (vocabularyFlashcard_Group_2Query == null) {
                QueryBuilder<VocabularyGeneralData> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                vocabularyFlashcard_Group_2Query = queryBuilder.build();
            }
        }
        Query<VocabularyGeneralData> query = vocabularyFlashcard_Group_2Query.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

    /** Internal query to resolve the "group_3" to-many relationship of VocabularyFlashcard. */
    public List<VocabularyGeneralData> _queryVocabularyFlashcard_Group_3(Long id) {
        synchronized (this) {
            if (vocabularyFlashcard_Group_3Query == null) {
                QueryBuilder<VocabularyGeneralData> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                vocabularyFlashcard_Group_3Query = queryBuilder.build();
            }
        }
        Query<VocabularyGeneralData> query = vocabularyFlashcard_Group_3Query.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

    /** Internal query to resolve the "part_of_speech" to-many relationship of VocabularyFlashcard. */
    public List<VocabularyGeneralData> _queryVocabularyFlashcard_Part_of_speech(Long id) {
        synchronized (this) {
            if (vocabularyFlashcard_Part_of_speechQuery == null) {
                QueryBuilder<VocabularyGeneralData> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                vocabularyFlashcard_Part_of_speechQuery = queryBuilder.build();
            }
        }
        Query<VocabularyGeneralData> query = vocabularyFlashcard_Part_of_speechQuery.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

    /** Internal query to resolve the "connotation" to-many relationship of VocabularyFlashcard. */
    public List<VocabularyGeneralData> _queryVocabularyFlashcard_Connotation(Long id) {
        synchronized (this) {
            if (vocabularyFlashcard_ConnotationQuery == null) {
                QueryBuilder<VocabularyGeneralData> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                vocabularyFlashcard_ConnotationQuery = queryBuilder.build();
            }
        }
        Query<VocabularyGeneralData> query = vocabularyFlashcard_ConnotationQuery.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

}
