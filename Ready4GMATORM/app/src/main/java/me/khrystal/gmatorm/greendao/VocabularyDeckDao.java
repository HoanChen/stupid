package me.khrystal.gmatorm.greendao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import me.khrystal.gmatorm.ormdto.VocabularyCategory;

import me.khrystal.gmatorm.ormdto.VocabularyDeck;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "vocabularydeck".
*/
public class VocabularyDeckDao extends AbstractDao<VocabularyDeck, Long> {

    public static final String TABLENAME = "vocabularydeck";

    /**
     * Properties of entity VocabularyDeck.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IsNew = new Property(1, boolean.class, "isNew", false, "is_new");
        public final static Property Creation_date = new Property(2, String.class, "creation_date", false, "creation_date");
        public final static Property Modified_data = new Property(3, String.class, "modified_data", false, "modified_data");
        public final static Property Create_at = new Property(4, String.class, "create_at", false, "created_at");
        public final static Property Updated_at = new Property(5, String.class, "updated_at", false, "updated_at");
        public final static Property Client_creation_date = new Property(6, String.class, "client_creation_date", false, "client_creation_date");
        public final static Property Title = new Property(7, String.class, "title", false, "title");
        public final static Property Resource_uri = new Property(8, String.class, "resource_uri", false, "resource_uri");
        public final static Property Order = new Property(9, int.class, "order", false, "order");
        public final static Property Uuid = new Property(10, String.class, "uuid", false, "uuid");
        public final static Property Is_active = new Property(11, boolean.class, "is_active", false, "is_active");
        public final static Property Category_id = new Property(12, long.class, "category_id", false, "category_id");
    }

    private DaoSession daoSession;


    public VocabularyDeckDao(DaoConfig config) {
        super(config);
    }
    
    public VocabularyDeckDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VocabularyDeck entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIsNew() ? 1L: 0L);
 
        String creation_date = entity.getCreation_date();
        if (creation_date != null) {
            stmt.bindString(3, creation_date);
        }
 
        String modified_data = entity.getModified_data();
        if (modified_data != null) {
            stmt.bindString(4, modified_data);
        }
 
        String create_at = entity.getCreate_at();
        if (create_at != null) {
            stmt.bindString(5, create_at);
        }
 
        String updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindString(6, updated_at);
        }
 
        String client_creation_date = entity.getClient_creation_date();
        if (client_creation_date != null) {
            stmt.bindString(7, client_creation_date);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(8, title);
        }
 
        String resource_uri = entity.getResource_uri();
        if (resource_uri != null) {
            stmt.bindString(9, resource_uri);
        }
        stmt.bindLong(10, entity.getOrder());
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(11, uuid);
        }
        stmt.bindLong(12, entity.getIs_active() ? 1L: 0L);
        stmt.bindLong(13, entity.getCategory_id());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VocabularyDeck entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIsNew() ? 1L: 0L);
 
        String creation_date = entity.getCreation_date();
        if (creation_date != null) {
            stmt.bindString(3, creation_date);
        }
 
        String modified_data = entity.getModified_data();
        if (modified_data != null) {
            stmt.bindString(4, modified_data);
        }
 
        String create_at = entity.getCreate_at();
        if (create_at != null) {
            stmt.bindString(5, create_at);
        }
 
        String updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindString(6, updated_at);
        }
 
        String client_creation_date = entity.getClient_creation_date();
        if (client_creation_date != null) {
            stmt.bindString(7, client_creation_date);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(8, title);
        }
 
        String resource_uri = entity.getResource_uri();
        if (resource_uri != null) {
            stmt.bindString(9, resource_uri);
        }
        stmt.bindLong(10, entity.getOrder());
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(11, uuid);
        }
        stmt.bindLong(12, entity.getIs_active() ? 1L: 0L);
        stmt.bindLong(13, entity.getCategory_id());
    }

    @Override
    protected final void attachEntity(VocabularyDeck entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public VocabularyDeck readEntity(Cursor cursor, int offset) {
        VocabularyDeck entity = new VocabularyDeck( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getShort(offset + 1) != 0, // isNew
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // creation_date
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // modified_data
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // create_at
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // updated_at
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // client_creation_date
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // title
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // resource_uri
            cursor.getInt(offset + 9), // order
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // uuid
            cursor.getShort(offset + 11) != 0, // is_active
            cursor.getLong(offset + 12) // category_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VocabularyDeck entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIsNew(cursor.getShort(offset + 1) != 0);
        entity.setCreation_date(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setModified_data(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreate_at(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUpdated_at(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setClient_creation_date(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTitle(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setResource_uri(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setOrder(cursor.getInt(offset + 9));
        entity.setUuid(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIs_active(cursor.getShort(offset + 11) != 0);
        entity.setCategory_id(cursor.getLong(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(VocabularyDeck entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(VocabularyDeck entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VocabularyDeck entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getVocabularyCategoryDao().getAllColumns());
            builder.append(" FROM vocabularydeck T");
            builder.append(" LEFT JOIN vocabularycategory T0 ON T.\"category_id\"=T0.\"id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected VocabularyDeck loadCurrentDeep(Cursor cursor, boolean lock) {
        VocabularyDeck entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        VocabularyCategory category = loadCurrentOther(daoSession.getVocabularyCategoryDao(), cursor, offset);
         if(category != null) {
            entity.setCategory(category);
        }

        return entity;    
    }

    public VocabularyDeck loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<VocabularyDeck> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<VocabularyDeck> list = new ArrayList<VocabularyDeck>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<VocabularyDeck> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<VocabularyDeck> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
